262.4 * 2
150 * 4
150 * 8/5
240 * 3
165 * 8/5
165 * 2
165 * 2
50 / 4.54609
264 / 50
5.28 * 4.54609
24 * 117
24 * 1.17
165 * 2
330 / 50
6.6 * 4.54609
30 * 1.17
75 / 25
3 * 4.54609
13.5 * 1.17
68 + 50
92 - 68
24/3
require(raster)
??tif
l = readTIFF('/Users/robinedwards/Downloads/F182013.v4c.avg_lights_x_pct/F182013.v4c.stable_lights.avg_vis.tif')
require(tiff)
l = readGDAL('/Users/robinedwards/Downloads/F182013.v4c.avg_lights_x_pct/F182013.v4c.stable_lights.avg_vis.tif', layer=1, values=T)
require(rgdal)
l = readGDAL('/Users/robinedwards/Downloads/F182013.v4c.avg_lights_x_pct/F182013.v4c.stable_lights.avg_vis.tif', layer=1, values=T)
l = readGDAL('/Users/robinedwards/Downloads/F182013.v4c.avg_lights_x_pct/F182013.v4c.stable_lights.avg_vis.tif')
require(rgdal)
1e9
1e5 / 1e7
require(ggplot2)
crimes <- data.frame(state = tolower(rownames(USArrests)), USArrests)
library(reshape2) # for melt
crimesm <- melt(crimes, id = 1)
require(maps))
require(maps)
states_map <- map_data("state")
ggplot(crimes, aes(map_id = state)) + geom_map(aes(fill = Murder), map = states_map) + expand_limits(x = states_map$long, y = states_map$lat)
last_plot() + coord_map()
ggplot(crimesm, aes(map_id = state)) + geom_map(aes(fill = value), map = states_map) + expand_limits(x = states_map$long, y = states_map$lat) + facet_wrap( ~ variable)
ggplot(crimesm, aes(map_id = state)) + geom_map(aes(fill = value), map = states_map) + expand_limits(x = states_map$long, y = states_map$lat) + facet_wrap( ~ variable) + coord_map()
ggplot(crimesm, aes(map_id = state)) + geom_map(aes(fill = value), map = states_map) + expand_limits(x = states_map$long, y = states_map$lat) + facet_wrap( ~ variable) + coord_map() + theme_map()
require(ggthemes)
ggplot(crimesm, aes(map_id = state)) + geom_map(aes(fill = value), map = states_map) + expand_limits(x = states_map$long, y = states_map$lat) + facet_wrap( ~ variable) + coord_map() + theme_map()
ggplot(crimesm, aes(map_id = state)) + geom_map(aes(fill = value), map = states_map) + facet_wrap( ~ variable) + coord_map() + theme_map()
ggplot(crimesm, aes(map_id = state)) + geom_map(aes(fill = value), map = states_map) + facet_wrap( ~ variable) + coord_map() + theme_map()
d = data.frame(bird = c('crows n stuff','parrots n stuff','robins','chickens','owls'),
intelligence = c(7,8.5,5,4,2))
d
ggplot(d, aes(bird, intelligence)) + geom_bar()
require(ggplot2)
ggplot(d, aes(bird, intelligence)) + geom_bar()
ggplot(d, aes(bird, intelligence)) + geom_bar(stat='identity')
d$bird = ordered(d$bird, levels=c('crows n stuff','parrots n stuff','robins','chickens','owls'))
ggplot(d, aes(bird, intelligence)) + geom_bar(stat='identity')
d$bird = ordered(d$bird, levels=c('crows n stuff','parrots n stuff','robins','chickens','OWLS'))
d = data.frame(bird = c('crows n stuff','parrots n stuff','robins','chickens','OWLS'),
intelligence = c(7,8.5,5,4,2))
d$bird = ordered(d$bird, levels=c('crows n stuff','parrots n stuff','robins','chickens','OWLS'))
ggplot(d, aes(bird, intelligence)) + geom_bar(stat='identity')
ggplot(d, aes(bird, intelligence, fill=bird)) + geom_bar(stat='identity')
devtools::install_github('timelyportfolio/mapshaper_htmlwidget')
install.packages('htmlwidgets')
devtools::install_github('timelyportfolio/mapshaper_htmlwidget')
require(mapshaper_htmlwidget)
devtools::install_github('timelyportfolio/mapshaper_htmlwidget')
require(mapshaperWidget)
?mapshaperWidget
library(mapshaperWidget)
library(tmap)
install.packages('tmap')
library(sp)
data(World)
library(mapshaperWidget)
library(tmap)
library(sp)
data(World)
plot(World)
plot(World)
mapshaper(World)
?mapshaper
?mapshaper
200 /12
300/12
require(dplyr)
?summarise
summarise(iris)
iris
summarise(iris)
iris >%> summarise()
require(tidyr)
iris >%> summarise()
iris %>% summarise()
iris %>% glimpse()
?glimpse
summary(iris)
class(iris$Species)
iris$spec = as.numeric(iris$Species)
summary(iris)
class(iris$spec)
iris$spec = factor(as.numeric(iris$Species), levels=1:3)
summary(iris)
x = summary(iris)
class(x)
dim(x)
x[1,]
x[2,]
?table
summary(iris)
head(iris)
iris[[1]]
paste(iris[[1]], collapse=',')
summary(1:10)
1:10
summary(1:9)
x = rnorm(1000) * 100
x
x = rnorm(100) * 100
paste(x, collapse=',')
d = iris
apply(iris, 1, sum)
apply(iris, 2, sum)
apply(iris, 2, FUN=sum)
apply(iris, 1, FUN=sum)
apply(iris, 1, FUN='sum')
?apply
apply(iris, 2, sum)
apply(iris[,1:3], 2, sum)
apply(iris[,1:3], 2, c(sum,sum,mean))
apply(iris[,1:3], 2, sum)
apply(iris[,1:3], 2, sum)
apply(iris[,1:3], 2, function(col) sum(col()))
apply(iris[,1:3], 2, function(col){sum(col())} )
apply(iris[,1:3], 2, function(x){sum(x)} )
apply(iris[,1:3], 2, sum
apply(iris[,1:3], 2, sum)
apply(iris[,1:3], 2, sum) / c(1,1,10)
apply(iris[,1:3], 2, sum) / c(1,1,nrow(iris))
apply(iris[,1:3], 2, sum) / c(rep(1,2),nrow(iris))
head(iris)
apply(iris[,1:4], 2, sum) / c(rep(1,3),nrow(iris))
require(fread)
require(data.table)
fread
str_fails = 'L1\tsome\tunquoted\tstuff\nL2\tsome\t"half" quoted\tstuff\nL3\tthis\t"should work"\tok thought'
str_works = gsub('"', '', str_fails)
fread(str_works, sep='\t', header=F, skip=0L)
fread(str_fails, sep='\t', header=F, skip=0L)
?fread
install.packages('data.table')
install.packages("data.table")
require(data.table)
?fread
fread(str_fails, sep='\t', header=F, skip=0L)
str_fails = 'L1\tsome\tunquoted\tstuff\nL2\tsome\t"half" quoted\tstuff\nL3\tthis\t"should work"\tok thought'
str_works = gsub('"', '', str_fails)
fread(str_fails, sep='\t', header=F, skip=0L)
fread(str_fails, sep='\t', header=F, skip=0L, quote='"')
fread(str_fails, sep='\t', header=F, skip=0L, quote="'")
fread(str_fails, sep='\t', header=F, skip=0L, quote="'")
fread(str_fails, sep='\t', header=F, skip=0L, quote="")
fread(str_fails, sep='\t', header=F, skip=0L, quote='')
fread(str_fails, sep='\t', header=F, skip=0L, quote='"')
fread(str_fails, sep='\t', header=F, skip=0L, quote="'")
fread(str_fails, sep='\t', header=F, skip=0L, quote="\"")
fread(str_fails, sep='\t', header=F, skip=0L, quote='\"')
uninstall.packages('data.table')
remove.packages('data.table')
remove.packages(data.table)
install.packages('data.table')
install.packages("data.table")
require(data.table)
?fread
fread(str_fails, sep='\t', header=F, skip=0L, quote='\"')
fread(str_fails, sep='\t', header=F, skip=0L, quote='"')
fread(str_fails, sep='\t', header=F, skip=0L, quote='')
rep(' $ ',2)
c(rep(' $ ',2), collapse='')
paste(rep(' $ ',2), collapse='')
remove.packages(fread)
remove.packages(data.table)
remove.packages('data.table')
install.packages('data.table')
str_fails = 'L1\tsome\tunquoted\tstuff\nL2\tsome\t"half" quoted\tstuff\nL3\tthis\t"should work"\tok thought'
str_works = gsub('"', '', str_fails)
fread(str_works, sep='\t', header=F, skip=0L)
require(data.table)
fread(str_works, sep='\t', header=F, skip=0L)
fread(str_fails, sep='\t', header=F, skip=0L)
?fread
remove.packages('data.table')
devtools::install_github("Rdatatable/data.table")
require(data.table)
devtools::install_github("Rdatatable/data.table")
require(data.table)
apply(1:3, function(i){
return(data.frame(user = users[i],
age = ages[i]))
})
apply(1:3, FUN=function(i){
return(data.frame(user = users[i],
age = ages[i]))
})
apply(1:3, FUN=function(i){
return(data.frame(user = users[i],
age = ages[i]))
})
lapply(1:3, FUN=function(i){
return(data.frame(user = users[i],
age = ages[i]))
})
users = c('John','Jill','James')
ages = c(25,53,37)
lapply(1:3, FUN=function(i){
return(data.frame(user = users[i],
age = ages[i]))
})
users_list <- lapply(1:3, FUN=function(i){
return(data.frame(user = users[i],
age = ages[i]))
})
do.call(rbind.fill, users_list)
rbind.fill
??rbind.fill
do.call('rbind', users_list)
require(gridPoints)
?grid_jitter
d1 = data.frame(x = rnorm(500), y = rnorm(500))
d1g = grid_jitter(d1, nx=75, ny=75, tol=5)
class(d1g)
head(d1g)
d2 = faithful
d2g = grid_jitter(d2, nx=50, ny=50, tol=3)
d3 = ggplot2::mpg[,c(3,8)]
d3g = grid_jitter(d3, nx=100, ny=100, tol=3)
d4 = ggplot2::diamonds[sample(1:53940, 500),c('carat','price')]
d4g = grid_jitter(d4, nx=300, ny=300, tol=2) # fails
d4g = grid_jitter(d4, nx=300, ny=300, tol=5, plotresults=F)
d5 = data.frame(x=state.center$x, y=state.center$y, id=state.abb)
d5j = grid_jitter(d5[,1:2], nx=10, ny=8, tol=3, plotresults=T)
cols = sample(colorRampPalette(c('darkblue','blue','lightblue'))(50))
par(mai=rep(.6,4), mfrow=c(1,2))
plot(d5[,1:2], pch=15, cex=3, col=cols, asp=2.5, xlab=NA, ylab=NA)
text(d5[,1:2], labels=state.abb, col='white', cex=.7)
plot(d5j, pch=15, cex=3, col=cols, asp=2.5, xlab=NA, ylab=NA)
text(d5j, labels=d5$id, col='white', cex=.7)
d5 = data.frame(x = c(1,rep(50,500), 100), y = c(1,rep(50,500), 100))
d5g = grid_jitter(d5, nx=30, ny=30, tol=15)
d4 = ggplot2::diamonds[sample(1:53940, 500),c('carat','price')]
d4g = grid_jitter(d4, nx=300, ny=300, tol=2) # fails
d4g = grid_jitter(d4, nx=300, ny=300, tol=5, plotresults=F)
d4g = grid_jitter(d4, nx=300, ny=300, tol=5, plotresults=F)
?grid_points
d = faithful
d$cat = sample(c('A','A','A','A','B','B','C'), nrow(d), rep=T)
d$size = round(10 * rlnorm(nrow(d)))
d$temp = round(100 * rlnorm(nrow(d)))
d$tempcat = c('cool','hot')[cut(d$temp, quantile(d$temp,c(0,.5,1)))]
View(d)
d_ag = grid_points(d, nx = 20, FUN=length)
plot(d[,1:2], pch=16, cex=.3, col='red')
symbols(d_ag[,1:2], squares=sqrt(d_ag$n), inches=.3, add=T)
grid_points(d[,1:2], z=d$temp, nx = 5, FUN=mean)
grid_points(d[,1:2], z=d$temp, nx = 5, FUN=c('min','max','median','length'))
grid_points(d[,1:2], z=d[,c('size','temp')], nx = 5, FUN=mean)
grid_points(d[,1:2], z=d[,c('size','temp')], nx = 5, FUN=c('mean','median'))
grid_points(d[,1:2], z=d[,c('size','temp')], nx = 5, FUN=c('mean','median','sum')) # error
grid_points(d[,1:2], z=d$size, grp=d[,c('cat','tempcat')], nx = 5, FUN=mean)
grid_points(d[,1:2], z=d[,c('size','temp')], grp=d[,c('cat','tempcat')], nx = 5, FUN=mean)
topcase = function(v){
counts = plyr::count(v)
counts = counts[order(counts$freq, decreasing=T),]
counts[1,1]
}
d_ag = grid_points(d[,1:2], nx = 10, z=d$cat, FUN=topcase)
plot(d[,1:2], pch='.')
text(d_ag[,1:2], labels=d_ag$z, cex=.7, col='red')
head(d)
grid_points(d[,1:2], z=d$temp, nx = 5, FUN=mean)
grid_points(d[,1:2], z=d$temp, nx = 5, FUN=c('min','max','median','length'))
grid_points(d[,1:2], z=d[,c('size','temp')], nx = 5, FUN=mean)
grid_points(d[,1:2], z=d[,c('size','temp')], nx = 5, FUN=c('mean','median'))
grid_points(d[,1:2], z=d[,c('size','temp')], nx = 5, FUN=c('mean','median','sum')) # error
grid_points(d[,1:2], z=d$size, grp=d[,c('cat','tempcat')], nx = 5, FUN=mean)
grid_points(d[,1:2], z=d[,c('size','temp')], grp=d[,c('cat','tempcat')], nx = 5, FUN=mean)
?gridPoints
?gridPoints-package
?grid_jitter
grid_points
grid_jitter
require(raster)
raster(volcano)
as.raster(volcano)
x = raster(volcano)
plot(x)
v = as.matrix(x)
v
ls()
.ls()
identical(v, volcano)
sqrt(99475)
315.3966 ^ 2
12.5 * 200
12.5 * 200
install.packages('ggplot2')
require(ggplot2)
?ggplot2
d = data.frame(x = as.vector(col(volcano)),
y = (yy <- as.vector(row(volcano)))[length(yy):1],
z = as.vector(volcano)
)
ggplot(d, aes(x, y, fill=z)) + geom_tile() +
theme_minimal() +
theme(axis.ticks = element_blank(),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.ticks.margin = unit(0,"mm"),
panel.margin = unit(c(0,0,0,0),"mm"),
plot.background = element_rect(fill = 'red'),
plot.margin=unit(c(0,0,0,0),"mm"),
legend.position="none") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
labs(x=NULL, y=NULL)
require(grid)
ggplot(d, aes(x, y, fill=z)) + geom_tile() +
theme_minimal() +
theme(axis.ticks = element_blank(),
panel.grid = element_blank(),
axis.text = element_blank(),
axis.ticks.margin = unit(0,"mm"),
panel.margin = unit(c(0,0,0,0),"mm"),
plot.background = element_rect(fill = 'red'),
plot.margin=unit(c(0,0,0,0),"mm"),
legend.position="none") +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
labs(x=NULL, y=NULL)
setwd('/Users/robinedwards/Documents/MSF/Buendia/battery')
if(!require(ggplot2)){
install.packages('ggplot2')
require(ggplot2)
}
if(require(ggplot2)){
plt = ggplot(combined, aes(t_adj, bat, group=id, col=factor(id))) +
geom_line(size=.75) +
labs(x = 'time (hours)', y = 'charge (%)', title = 'Battery Analysis')
ggsave(plt, file='analysis_plot.pdf', w=12, h=8)
}
setwd('/Users/robinedwards/Documents/MSF/Buendia/battery')
datain = read.csv('battery_data.csv', header=F)
combined = do.call('rbind', lapply(1:ncol(datain), FUN = function(i){
d = na.omit(datain[, i])
d = data.frame(t = 1:length(d)/6, bat = d)
# initial model to estimate time when battery was 100%
lm = lm(t ~ bat, data=d)
pred = predict.lm(lm, newdata=data.frame(bat=c(100,0)), se.fit = TRUE)
d$t_adj = d$t - pred$fit[1]
d$id = i
return(d)
}))
if(require(ggplot2)){
plt = ggplot(combined, aes(t_adj, bat, group=id, col=factor(id))) +
geom_line(size=.75) +
labs(x = 'time (hours)', y = 'charge (%)', title = 'Battery Analysis')
ggsave(plt, file='analysis_plot.pdf', w=12, h=8)
}
f = lm(t_adj ~ bat, data=combined)
p = predict.lm(f, newdata=data.frame(bat=c(100,0)), se.fit = TRUE)
life = diff(p$fit)
print(paste('Estimated duration', formatC(life, digits = 3), 'hours'))
require(raster)
require(rgdal)
require(ggplot2)
require(grid)
require(ggplot2)
require(grid)
setwd('/Users/robinedwards/Documents/Blog/unknown_pleasures/worldlines/amazon/spagetti')
d = read.csv('d.csv')
asp = 0.5625
lines_plot = function(d, col='black', bc='white', ymult=NULL, lwd=.3){
t0 = Sys.time()
names(d) = c('x','grp','z')
if(is.null(ymult)){
yscale = diff(range(d$grp))
yrange = diff(range(d$z))
ymult = 1000 * yscale/yrange
print(paste('ymult =', formatC(signif(ymult,digits=3), digits=3,format="fg", flag="#")))
}
ymult = ymult/1000
p = ggplot() +
labs(x = NULL, y = NULL) +
theme_minimal() +
theme(axis.ticks = element_blank(),
panel.grid = element_blank(),
axis.text = element_blank(),
plot.background = element_rect(fill = bc),
plot.margin=unit(c(0,0,0,0),"mm"),
legend.position="none") +
scale_colour_gradientn(colours = col) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0))
ymin = 1e10; ymax = -1e10
for(i in sort(unique(d$grp), decreasing=TRUE)){
dat = subset(d, grp == i)
y0 = dat$grp[1]
dat$y = ymult * dat$z + y0
y0 = min(dat$y)
dat2 = dat[c(1,1:nrow(dat),nrow(dat)), ] # add start/end nodes
dat2$y[c(1,nrow(dat2))] = y0
ylims = range(dat$y)
if(ylims[1] < ymin) ymin = ylims[1]
if(ylims[2] > ymax) ymax = ylims[2]
p = p + geom_polygon(data=dat2, aes(x, y, group=grp), fill=bc) +
geom_path(data=dat, aes(x, y, group=grp, col=z), size=lwd, lineend='round')
}
p = p + coord_cartesian(ylim = c(ymin, ymax))
return(p)
}
i=1
cols_sea = colorRampPalette(c('midnightblue','royalblue1','lightcyan'))(-min(d$v)+i)
cols_land = colorRampPalette(c('grey40','white'))(max(d$v)-i)
cols = c(cols_sea, cols_land)
p = lines_plot(d, bc = 'black', col=cols, lwd=.15, ymult=3)
.ls()
head(d)
d = read.csv('d.csv')
asp = 0.5625
cols_sea = colorRampPalette(c('midnightblue','royalblue1','lightcyan'))(-min(d$v)+i)
cols_land = colorRampPalette(c('grey40','white'))(max(d$v)-i)
cols = c(cols_sea, cols_land)
p = lines_plot(d, bc = 'black', col=cols, lwd=.15, ymult=3)
fn = paste0('output/',formatC(i+150, width=3, flag="0"), '.png')
fn
ggsave(p, file=fn, w=6.4, h=6.4*asp, dpi=300)
?install.packages()
?install.packages()
setwd('/Users/robinedwards/Documents/MSF/Buendia/battery')
datain = read.csv('battery_data.csv', header=F)
combined = do.call('rbind', lapply(1:ncol(datain), FUN = function(i){
d = na.omit(datain[, i])
d = data.frame(t = 1:length(d)/6, bat = d)
# initial model to estimate time when battery was 100%
lm = lm(t ~ bat, data=d)
pred = predict.lm(lm, newdata=data.frame(bat=c(100,0)), se.fit = TRUE)
d$t_adj = d$t - pred$fit[1]
d$id = i
return(d)
}))
head(combined)
ggplot(combined, aes(t, bat, group=id, col=factor(id))) +
geom_line(size=.75) +
labs(x = 'time (hours)', y = 'charge (%)', title = 'Battery Analysis')
ggplot(combined, aes(t_adj, bat, group=id, col=factor(id))) +
geom_line(size=.75) +
labs(x = 'time (hours)', y = 'charge (%)', title = 'Battery Analysis')
f = lm(t_adj ~ bat, data=combined)
p = predict.lm(f, newdata=data.frame(bat=c(100,0)), se.fit = TRUE)
p
life = diff(p$fit)
print(paste('Estimated duration', formatC(life, digits = 3), 'hours'))
if(require(ggplot2)){
plt = ggplot(combined, aes(t_adj, bat, group=id, col=factor(id))) +
geom_line(size=.75) +
labs(x = 'time (hours)', y = 'charge (%)', title = 'Battery Analysis')
ggsave(plt, file='analysis_plot.pdf', w=8, h=6)
}
if(require(ggplot2)){
plt = ggplot(combined, aes(t_adj, bat, group=id, col=factor(id))) +
geom_line(size=1) +
labs(x = 'time (hours)', y = 'charge (%)', title = 'Battery Analysis')
ggsave(plt, file='analysis_plot.pdf', w=8, h=6)
}
if(require(ggplot2)){
plt = ggplot(combined, aes(t_adj, bat, group=id, col=factor(id))) +
geom_line(size=1) +
labs(x = 'time (hours)', y = 'charge (%)', title = 'Battery Analysis')
ggsave(plt, file='analysis_plot.pdf', w=6, h=4)
}
if(require(ggplot2)){
plt = ggplot(combined, aes(t_adj, bat, group=id, col=factor(id))) +
geom_line(size=1) + scale_y_continuous(limits = c(0, 100)) +
labs(x = 'time (hours)', y = 'charge (%)', title = 'Battery Analysis')
ggsave(plt, file='analysis_plot.pdf', w=6, h=4)
}
?scale_y_continuous
if(require(ggplot2)){
plt = ggplot(combined, aes(t_adj, bat, group=id, col=factor(id))) +
geom_line(size=1) + expand_limits(x = 0, y = 0) +
labs(x = 'time (hours)', y = 'charge (%)', title = 'Battery Analysis')
ggsave(plt, file='analysis_plot.pdf', w=6, h=4)
}
if(require(ggplot2)){
plt = ggplot(combined, aes(t_adj, bat, group=id, col=factor(id))) +
geom_line(size=1) + expand_limits(x = 0) + scale_y_continuous(limits = c(0,100)) +
labs(x = 'time (hours)', y = 'charge (%)', title = 'Battery Analysis')
ggsave(plt, file='analysis_plot.pdf', w=6, h=4)
}
?install.packages
-150:200
-150:200 + 150
formatC(-150:200 + 150, width=3, flag="0")
formatC(i + 150, width=3, flag="0")
ggplot(combined, aes(t_adj, bat, group=id, col=factor(id))) +
geom_line(size=.75) +
labs(x = 'time (hours)', y = 'charge (%)', title = 'Battery Analysis')
ggplot(combined, aes(t, bat, group=id, col=factor(id))) +
geom_line(size=.75) +
labs(x = 'time (hours)', y = 'charge (%)', title = 'Battery Analysis')
